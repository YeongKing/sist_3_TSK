package praa;

import java.awt.BorderLayout;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

@SuppressWarnings("serial")
public class JavaMemoDesign extends JFrame{

	private JMenuItem jmiNew, jmiOpen, jmiSave, jmiClose, jmiFont, jmiHelp, jmiNewSave;
	private JTextArea jtaNote;
	private Font fontNote;
//	private File fontFile;
	private Font saveFont;
	
	public JavaMemoDesign() {
		super("메모장");
		
		
		JMenuBar jmb = new JMenuBar();
		JMenu jmFile = new JMenu("파일");
		JMenu jmForm = new JMenu("서식"); 
		JMenu jmHelp = new JMenu("도움말");
		
		jmiNew = new JMenuItem("새글");
		jmiOpen = new JMenuItem("열기");
		jmiNewSave = new JMenuItem("새로 저장");
		jmiSave = new JMenuItem("저장");
		jmiClose = new JMenuItem("종료");
		jmiFont = new JMenuItem("글꼴");
		jmiHelp = new JMenuItem("메모장 정보");
		
		fontNote = new Font(FontName.CLEAR_GOTHIC.getName(), Font.PLAIN, 10);
		jtaNote = new JTextArea();
		jtaNote.setFont(fontNote);
		
		jmFile.add(jmiNew);
		jmFile.addSeparator();
		jmFile.add(jmiOpen);
		jmFile.add(jmiNewSave);
		jmFile.add(jmiSave);
		jmFile.addSeparator();
		jmFile.add(jmiClose);
		jmForm.add(jmiFont);
		jmHelp.add(jmiHelp);
		
		jmb.add(jmFile);
		jmb.add(jmForm);
		jmb.add(jmHelp);
		
		JScrollPane jsp = new JScrollPane(jtaNote);
		
		setJMenuBar(jmb);
		
		JavaMemoEvent jme = new JavaMemoEvent(this);
		
		
		File fontFile = new File("C:/Users/user/Desktop/test/font.txt");
        if (fontFile.exists()) {
            saveFont = getFont();
            if (saveFont != null) {
            	jtaNote.setFont(saveFont);
            } else {
                jtaNote.setFont(new Font("고딕", Font.PLAIN, 12));
            }
        } else {
        	jtaNote.setFont(new Font("고딕", Font.PLAIN, 12));
        } 

		
		
		
		
		
		
		
		
		
		
		
		
		jmiNew.addActionListener(jme);
		jmiOpen.addActionListener(jme);
		jmiNewSave.addActionListener(jme);
		jmiSave.addActionListener(jme);
		jmiClose.addActionListener(jme);
		jmiFont.addActionListener(jme);
		jmiHelp.addActionListener(jme);
		addWindowListener(jme);

		setLayout(new BorderLayout());	// default가 BorderLayout()
		
		add("Center", jsp);
		
		setBounds(460, 140, 700, 600);
		setVisible(true);
	} // JavaMemoDesign


	
	
	
	
	
	
	/////////////////////////////////
	
	public Font getFont() {
        Font font = null;
        ObjectInputStream ois = null;
        try {
            File fontFile = new File("C:/Users/user/Desktop/test/font.txt");
            if (fontFile.exists()) {
                ois = new ObjectInputStream(new FileInputStream(fontFile));
                font = (Font) ois.readObject();
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();

            System.err.println("폰트를 불러오는 중에 문제가 발생했습니다. 기본 폰트로 설정합니다.");
        } finally {
            try {
                if (ois != null) {
                    ois.close();
                }
            } catch (IOException e) {
                e.printStackTrace();

                System.err.println("입출력 스트림을 닫는 중에 문제가 발생했습니다.");
            }
        }
        return font;
    }
	/////////////////
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	public void setJmiFont(JMenuItem jmiFont) {
			this.jmiFont = jmiFont;
		}

	public JMenuItem getJmiNew() {
		return jmiNew;
	}

	public JMenuItem getJmiNewSave() {
		return jmiNewSave;
	}

	public JMenuItem getJmiOpen() {
		return jmiOpen;
	}

	public JMenuItem getJmiSave() {
		return jmiSave;
	}

	public JMenuItem getJmiClose() {
		return jmiClose;
	}

	public JMenuItem getJmiFont() {
		return jmiFont;
	}

	public JMenuItem getJmiHelp() {
		return jmiHelp;
	}

	public JTextArea getJtaNote() {
		return jtaNote;
	}

	public Font getFontNote() {
		return fontNote;
	}

} // class
